version: '3.8'

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:16-alpine
    container_name: by_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-by_production}
      POSTGRES_USER: ${POSTGRES_USER:-by_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - by_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-by_user} -d ${POSTGRES_DB:-by_production}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for Caching - Production
  redis:
    image: redis:7-alpine
    container_name: by_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - by_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # BY API Application - Production
  api:
    build:
      context: ./Backend
      dockerfile: Dockerfile
      target: final
    container_name: by_api_prod
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${POSTGRES_DB:-by_production};Username=${POSTGRES_USER:-by_user};Password=${POSTGRES_PASSWORD}"
      JWT__SecretKey: ${JWT_SECRET_KEY}
      JWT__Issuer: ${JWT_ISSUER:-BY_API}
      JWT__Audience: ${JWT_AUDIENCE:-BY_Frontend}
      JWT__ExpirationMinutes: ${JWT_EXPIRATION_MINUTES:-15}
      Stripe__PublishableKey: ${STRIPE_PUBLISHABLE_KEY}
      Stripe__SecretKey: ${STRIPE_SECRET_KEY}
      Stripe__WebhookSecret: ${STRIPE_WEBHOOK_SECRET}
      Stripe__Currency: ${STRIPE_CURRENCY:-usd}
      Stripe__DefaultCharityName: ${STRIPE_DEFAULT_CHARITY_NAME}
      Stripe__DefaultCharityId: ${STRIPE_DEFAULT_CHARITY_ID}
      EnableSensitiveDataLogging: "false"
    ports:
      - "${API_PORT:-5185}:8080"
    volumes:
      - ./logs:/app/logs
    networks:
      - by_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 15s
      start_period: 120s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: by_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - by_network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  by_network:
    driver: bridge